{
	"info": {
		"_postman_id": "8401d908-1663-46f4-baab-14b62bbe872e",
		"name": "Valentino Artisan Coffee House API",
		"description": "An API for managing orders and products at a coffee place named Valentino's Artisan Coffee House.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38377225"
	},
	"item": [
		{
			"name": "status",
			"item": [
				{
					"name": "Get API status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"X-Powered-By\")).to.eql(\"Express\")\r",
									"}\r",
									"\r",
									")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Retrieve the current status of the API"
					},
					"response": [
						{
							"name": "API status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://valentinos-coffee.herokuapp.com/status",
									"protocol": "https",
									"host": [
										"valentinos-coffee",
										"herokuapp",
										"com"
									],
									"path": [
										"status"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\"\n}"
						}
					]
				}
			],
			"description": "Get the status of the API."
		},
		{
			"name": "products",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "The page number to fetch",
									"disabled": true
								},
								{
									"key": "category",
									"value": "cookie",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "3",
									"disabled": true
								}
							]
						},
						"description": "Retrieve a paginated list of products, 10 products per page"
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://valentinos-coffee.herokuapp.com/products?page=1",
									"protocol": "https",
									"host": [
										"valentinos-coffee",
										"herokuapp",
										"com"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let response;\r",
									"\r",
									"// Test that the response body is in JSON format and log the product description\r",
									"pm.test(\"Response body is JSON\", () => {\r",
									"    pm.response.to.be.json;\r",
									"    response = pm.response.json();\r",
									"    console.log(response['product-description']);\r",
									"});\r",
									"\r",
									"// Test that the Product ID is correct based on the value from the collection variable. ParseInt is used to transform a string into an integer.\r",
									"pm.test(\"Product ID is Correct\", () => {\r",
									"    pm.expect(response.id).to.eql(parseInt(pm.collectionVariables.get(\"productId\")));\r",
									"});\r",
									"\r",
									"// Test that the product name is \"Bagel\" and it is available\r",
									"pm.test(\"Product is Correct\", () => {\r",
									"    pm.expect(response).to.have.property(\"name\");\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.isAvailable).to.be.true;\r",
									"    pm.expect(response.isAvailable).to.eql(true);\r",
									"    //pm.expect(response.price).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						},
						"description": "Retrieve a single product by specifying the product ID."
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://valentinos-coffee.herokuapp.com/products?page=1",
									"protocol": "https",
									"host": [
										"valentinos-coffee",
										"herokuapp",
										"com"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "clients",
			"item": [
				{
					"name": "Register a new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"console.log(response.token);  // Log the token to console\r",
									"\r",
									"// Store the token in a collection variable\r",
									"pm.collectionVariables.set('apiKey', response.token);\r",
									"\r",
									"// Fetch the stored token (the variable is already set, so no need for console.log)\r",
									"const token = pm.collectionVariables.get('apiKey');\r",
									"\r",
									"// Test to check if the token was generated and stored successfully\r",
									"pm.test(\"Token stored Successfully\", function () {\r",
									"    pm.expect(token).to.eql(pm.variables.replaceIn(\"{{apiKey}}\"));\r",
									"});\r",
									"\r",
									"// Log the token after it's stored and retrieved\r",
									"console.log(token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Register a new API client by providing an email address"
					},
					"response": [
						{
							"name": "Client registered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://valentinos-coffee.herokuapp.com/clients",
									"protocol": "https",
									"host": [
										"valentinos-coffee",
										"herokuapp",
										"com"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"value\": \"reference #/components/schemas/ApiClient not found in the OpenAPI spec\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "orders",
			"item": [
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test to check if the response is in JSON format\r",
									"pm.test(\"Check response is JSON\", function () {\r",
									"    // Parse the response as JSON\r",
									"    response = pm.response.json();\r",
									"});\r",
									"\r",
									"// Store the Order ID in a collection variable\r",
									"pm.collectionVariables.set(\"OrderID\", response.id);\r",
									"\r",
									"// Test to check if the customer name matches the expected value\r",
									"pm.test(\"Customer Name\", function () {\r",
									"    // Assert that the customerName in the response matches the stored customerName variable\r",
									"    pm.expect(response.customerName).to.eql(pm.collectionVariables.get('customerName'));\r",
									"});\r",
									"\r",
									"// Test to verify that the Order ID consists of exactly 9 characters, \r",
									"// which can be uppercase letters and digits only (no special characters or spaces).\r",
									"// If id shows hypen or dash it will show test is fail.\r",
									"\r",
									"/*/pm.test(\"Order ID Format\", () => { \r",
									"    pm.expect(response.id).to.match(/^[A-Z0-9]{9}$/);\r",
									"}); */\r",
									"\r",
									"\r",
									"\r",
									"// Test to validate the response schema\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"clientId\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"created\": {\r",
									"                \"type\": \"string\",\r",
									"                \"format\": \"date-time\"\r",
									"            },\r",
									"            \"customerName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"products\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": {\r",
									"                            \"type\": \"integer\"\r",
									"                        },\r",
									"                        \"quantity\": {\r",
									"                            \"type\": \"integer\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\"id\", \"quantity\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"id\", \"clientId\", \"created\", \"customerName\", \"products\"],\r",
									"        \"additionalProperties\": false\r",
									"    };\r",
									"\r",
									"    // Validate the response against the defined JSON schema\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set ( \"customerName\", pm.variables.replaceIn('{{$randomFullName}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"{{customerName}}\",\n  \"products\": [\n    {\n      \"id\": 2001,\n      \"quantity\": 1\n    },\n    {\n      \"id\": 2002,\n      \"quantity\": 3\n    }\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "Place a new order by providing customer details and ordered products"
					},
					"response": [
						{
							"name": "Create a new order",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customerName\": \"Client Name\",\n  \"products\": [\n    {\n      \"id\": 2001,\n      \"quantity\": 1\n    },\n    {\n      \"id\": 2002,\n      \"quantity\": 3\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://valentinos-coffee.herokuapp.com/orders",
									"protocol": "https",
									"host": [
										"valentinos-coffee",
										"herokuapp",
										"com"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1729265600&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5%2BZI8r5ngyCMJ22mUfE3voigLCBGGbSCOctrEcVbzFk%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1729265600&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5%2BZI8r5ngyCMJ22mUfE3voigLCBGGbSCOctrEcVbzFk%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "171"
								},
								{
									"key": "Etag",
									"value": "W/\"ab-cZzwZI5ACcUZTV1VN5XFp61G8NM\""
								},
								{
									"key": "Date",
									"value": "Fri, 18 Oct 2024 15:33:20 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"RSATM0762\",\n     \"clientId\": \"098\",\n    \"created\": \"2024-10-18T15:33:20.709Z\",\n    \"customerName\": \"Sharon Hayes\",\n    \"products\": [\n        {\n            \"id\": 2001,\n            \"quantity\": 1\n        },\n        {\n            \"id\": 2002,\n            \"quantity\": 3\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "The requested order",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://valentinos-coffee.herokuapp.com/orders/:orderId",
									"protocol": "https",
									"host": [
										"valentinos-coffee",
										"herokuapp",
										"com"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{apiKey}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "x-api-key",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.glitch.me",
			"disabled": true
		},
		{
			"key": "apiKey",
			"value": "ENTER A VALID API KEY"
		},
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.herokuapp.com",
			"type": "string"
		},
		{
			"key": "customerName",
			"value": "Client Name"
		},
		{
			"key": "productId",
			"value": "productID",
			"type": "string"
		},
		{
			"key": "OrderID",
			"value": "Order ID"
		}
	]
}